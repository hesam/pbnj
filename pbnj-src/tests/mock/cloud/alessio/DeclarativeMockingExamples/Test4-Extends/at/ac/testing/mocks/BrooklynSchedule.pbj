package at.ac.testing.mocks;

import polyglot.ext.pbnj.tologic.*;
import polyglot.ext.pbnj.primitives.*;
import pbnj.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * A schedule is a sequence of TimedActions that forms a Scenario for testing when applied to a Policy Specification.
 *	We provide also the int[][] version because it's more generic and can be used to specify concurrent sensor reading
 */
public class BrooklynSchedule extends NewSchedule 
	ensures classInvariant(){
	
	// Add the BrooklynSpecific configurations
	spec int stabilityPeriodUp;
	spec int stabilityPeriodDown;
	spec int controlPeriod;
	spec int actuationDelay;
		
	public BrooklynSchedule(int stabilityPeriodUp, int stabilityPeriodDown, int controlPeriod, int actuationDelay){
		super();
		
		this.stabilityPeriodUp = stabilityPeriodUp;
		this.stabilityPeriodDown = stabilityPeriodDown;
		this.controlPeriod = controlPeriod;
		//
		this.actuationDelay = actuationDelay;
	}
	
	// Class Invariant - This MUST be true after each public method invocation !
	spec public boolean classInvariant() {
		return true &&
			super.classInvariant() &&
			stabilityPeriodUp >= 0 &&
			stabilityPeriodDown >= 0 &&
			controlPeriod >= 0 &&
			actuationDelay >= 0
		;
	}

	// Returns the FIRST instant of the NEXT interval. Intervals are [0, controlPeriod), [controlPeriod, 2*controlPeriod), etc
	// Note the integer division...
	spec public int getNextControlInterval(int time){

		if( controlPeriod == 0 ) 
			return time + 1; 
		else if( time / controlPeriod * controlPeriod <= time )
			return (time / controlPeriod * controlPeriod) + controlPeriod; // On the beginning, go to the next with sum
		else // if( time / controlPeriod * controlPeriod > time )
			return (time / controlPeriod * controlPeriod); // The rounding up shift to the next
		
		//else //  time / controlPeriod * controlPeriod < time
		//return (time / controlPeriod * controlPeriod) + controlPeriod;
	}
	
	spec int getMax(int a, int b){
		return ( a > b ) ? a : b;
	}

	// no two actions can be scheduled in the same control period
	spec boolean avoidConcurrentActions(){
		return
			all int i : 0 .. size - 1 |
				( all int j : 0 .. size - 1 |
					( i < j <==> getNextControlInterval( actions[i].time ) <= actions[j].time )
				)
		;
	}
	
	public void withDuration(int duration){
		super.withDuration( duration );
	}
	
	public void withoutConcurrentActions()
	{
		avoidConcurrentActionsH(); 
	}
	
	void avoidConcurrentActionsH()
		modifies fields TimedAction:time
		ensures 
			avoidConcurrentActions()
			// &&
			// validSchedule()
	{}
	
	
	// UTILS
	public String toString() {
		return 		"Schedule:\n" + Arrays.toString( actions ) + "\n"
				+ 	"Configuration:\n\tSup: " + stabilityPeriodUp +"\n\tSdown: " + stabilityPeriodDown + "\n\tControl: " + controlPeriod + "\n";
    }
	
}